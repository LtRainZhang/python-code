import numpy as np

path = r'test.xyz'
file = open(path,'r')
timestep = 0.5
n1 = 10000
n2 = 19999
x = file.read().split(' generated by VMD')
print(len(x))
print(x[1])
num = int(x[0])
#for i in range(n1, n2+1):
infor = x[1:]

num_Si = 0
num_O  = 0
num_Li = 0
num_Al = 0
num_Na = 0

D = {}
for i in range(n1-1, n2):
    each = infor[i].split('\n')
    each = each[1:]
    if i == n1 - 1:
        for j in range(num):
            char = each[j].split()[0]
            if char == 'Si':
                num_Si = num_Si + 1
            elif char == 'O':
                num_O = num_O + 1
            elif char == 'Li':
                num_Li = num_Li + 1
            elif char == 'Al':
                num_Al = num_Al + 1
            else:
                num_Na = num_Na + 1

#    print(each[0])
#    print(float(each[0].split()[1]))
    etch = []
    for j in range(num):
        xc = float(each[j].split()[1])
        yc = float(each[j].split()[2])
        zc = float(each[j].split()[3])
        one_frame = np.array([xc, yc, zc])
        etch.append(one_frame)
    D["p_%s" % i] = etch

print(num_Al)

t = 1

msd_Sifinal = []
msd_Ofinal = []
msd_Lifinal = []
msd_Alfinal = []
msd_Nafinal = []

for i in range(n2-n1):
    init = n1-1
    autocorr = n1 + t - 1
    msd_Si = 0
    msd_O = 0
    msd_Li = 0
    msd_Al = 0
    msd_Na = 0
    for j in range(n2-n1-t+1):
        str1 = '%d' % init
        str2 = '%d' % autocorr
        # define initial atom position
        init_p = eval("D['p_" + str1 + "']")
        # define final position
        final_p = eval("D['p_" + str2 + "']")
        for k in range(num_Al):
            x1 = init_p[k][0]
            x2 = final_p[k][0]
            y1 = init_p[k][1]
            y2 = final_p[k][1]
            z1 = init_p[k][2]
            z2 = final_p[k][2]
            msd_Al = msd_Al + pow((x1-x2),2) + pow((y1-y2),2) + pow((z1-z2),2)

        for k in range(num_Al,num_Al+num_Si):
            x1 = init_p[k][0]
            x2 = final_p[k][0]
            y1 = init_p[k][1]
            y2 = final_p[k][1]
            z1 = init_p[k][2]
            z2 = final_p[k][2]
            msd_Si = msd_Si + pow((x1 - x2), 2) + pow((y1 - y2), 2) + pow((z1 - z2), 2)

        for k in range(num_Al+num_Si, num_Al+num_Si+num_Li):
            x1 = init_p[k][0]
            x2 = final_p[k][0]
            y1 = init_p[k][1]
            y2 = final_p[k][1]
            z1 = init_p[k][2]
            z2 = final_p[k][2]
            msd_Li = msd_Li + pow((x1 - x2), 2) + pow((y1 - y2), 2) + pow((z1 - z2), 2)

        for k in range(num_Al+num_Si+num_Li, num_Al+num_Si+num_Li+num_O):
            x1 = init_p[k][0]
            x2 = final_p[k][0]
            y1 = init_p[k][1]
            y2 = final_p[k][1]
            z1 = init_p[k][2]
            z2 = final_p[k][2]
            msd_O = msd_O + pow((x1 - x2), 2) + pow((y1 - y2), 2) + pow((z1 - z2), 2)

        for k in range(num_Al+num_Si+num_Li+num_O, num_Al+num_Si+num_Li+num_O+num_Na):
            x1 = init_p[k][0]
            x2 = final_p[k][0]
            y1 = init_p[k][1]
            y2 = final_p[k][1]
            z1 = init_p[k][2]
            z2 = final_p[k][2]
            msd_Na = msd_Na + pow((x1 - x2), 2) + pow((y1 - y2), 2) + pow((z1 - z2), 2)

        init = init + 1
        autocorr = autocorr + 1

    msd_Siconvert = msd_Si / (num_Si * (n2 - n1 - t + 1))
    msd_Oconvert = msd_O / (num_O * (n2 - n1 - t + 1))
    msd_Liconvert = msd_Li / (num_Li * (n2 - n1 - t + 1))
    msd_Alconvert = msd_Al / (num_Al * (n2 - n1 - t + 1))
    msd_Naconvert = msd_Na / (num_Na * (n2 - n1 - t + 1))
    time = t * timestep / 1000

    msd_Sifinal.append([time, msd_Siconvert])
    msd_Ofinal.append([time, msd_Oconvert])
    msd_Lifinal.append([time, msd_Liconvert])
    msd_Alfinal.append([time, msd_Alconvert])
    msd_Nafinal.append([time, msd_Naconvert])

    t = t + 1
    print(t)

print(msd_Sifinal)
path2 = r'./msd2.data'
fp1 = open(path2, 'w')
print('time   MSD-Si   MSD-O   MSD-Li   MSD-Al   MSD-Na', file=fp1)

for i in range(t-1):
    print('%8.6f   %8.6f   %8.6f   %8.6f   %8.6f   %8.6f' % (msd_Sifinal[i][0], msd_Sifinal[i][1],
                                                             msd_Ofinal[i][1], msd_Lifinal[i][1], msd_Alfinal[i][1], msd_Nafinal[i][1]), file=fp1)









